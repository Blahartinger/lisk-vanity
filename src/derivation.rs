use std::convert::TryFrom;

use ed25519_dalek::{PublicKey, SecretKey};

use sha2::{Digest,Sha256,Sha512};

#[derive(PartialEq, Eq, Clone, Copy, Debug)]
pub enum GenerateKeyType {
    PrivateKey,
}

fn ed25519_privkey_to_pubkey(sec: &[u8; 32]) -> [u8; 32] {
    let secret_key = SecretKey::from_bytes(sec).unwrap();
    let public_key = PublicKey::from_secret::<Sha512>(&secret_key);
    public_key.to_bytes()
}

pub fn secret_to_pubkey(key_material: [u8; 32], generate_key_type: GenerateKeyType) -> [u8; 32] {
    match generate_key_type {
        GenerateKeyType::PrivateKey => ed25519_privkey_to_pubkey(&key_material),
    }
}

pub fn pubkey_to_address(pubkey: &[u8; 32]) -> u64 {
    let hash = Sha256::digest(pubkey);
    let first_eight_bytes = <&[u8; 8]>::try_from(&hash[0..8]).unwrap();
    return u64::from_le_bytes(*first_eight_bytes);
}

#[cfg(test)]
mod tests {
    // importing names from outer (for mod tests) scope.
    use super::*;

    #[test]
    fn test_ed25519_secret_to_pubkey() {
        // generated by nanocurrency-js
        // Seed: fb15ac405d762002202c66bd249589ad450d55631f7b1cd44fef19fcccbc6372
        // Secret: 847B0EC950A7F5B6AD6C3A1AA5A5B940608435B59F201662D13A6D11F65F7DA6
        // Pubkey: D741569435DC9698AAE5212A437F5DEDA76EFC4288CA3FCDE9604190A861FE07
        // Address: xrb_3ot3ctc5dq6pm4ogcabcafzouuf9fuy6748c9z8ykr43k4n85zi9zec5bxnz
        let mut privkey = [0u8; 32];
        privkey.copy_from_slice(
            &hex::decode("847B0EC950A7F5B6AD6C3A1AA5A5B940608435B59F201662D13A6D11F65F7DA6")
                .unwrap(),
        );
        let mut expected_pubkey = [0u8; 32];
        expected_pubkey.copy_from_slice(
            &hex::decode("D741569435DC9698AAE5212A437F5DEDA76EFC4288CA3FCDE9604190A861FE07")
                .unwrap(),
        );
        assert_eq!(ed25519_privkey_to_pubkey(&privkey), expected_pubkey);
    }

    #[test]
    fn test_secret_to_pubkey_from_privkey() {
        // generated by nanocurrency-js
        // Seed: fb15ac405d762002202c66bd249589ad450d55631f7b1cd44fef19fcccbc6372
        // Secret: 847B0EC950A7F5B6AD6C3A1AA5A5B940608435B59F201662D13A6D11F65F7DA6
        // Pubkey: D741569435DC9698AAE5212A437F5DEDA76EFC4288CA3FCDE9604190A861FE07
        // Address: xrb_3ot3ctc5dq6pm4ogcabcafzouuf9fuy6748c9z8ykr43k4n85zi9zec5bxnz
        let mut privkey = [0u8; 32];
        privkey.copy_from_slice(
            &hex::decode("847B0EC950A7F5B6AD6C3A1AA5A5B940608435B59F201662D13A6D11F65F7DA6")
                .unwrap(),
        );
        let mut expected_pubkey = [0u8; 32];
        expected_pubkey.copy_from_slice(
            &hex::decode("D741569435DC9698AAE5212A437F5DEDA76EFC4288CA3FCDE9604190A861FE07")
                .unwrap(),
        );
        assert_eq!(
            secret_to_pubkey(privkey, GenerateKeyType::PrivateKey),
            expected_pubkey
        );
    }

    #[test]
    fn test_pubkey_to_address() {
        // https://testnet-explorer.lisk.io/address/6076671634347365051L
        let mut pubkey = [0u8; 32];
        pubkey.copy_from_slice(
            &hex::decode("f4852b270f76dc8b49bfa88de5906e81d3b001d23852f0e74ba60cac7180a184")
                .unwrap(),
        );
        assert_eq!(
            pubkey_to_address(&pubkey),
            6076671634347365051u64
        );
    }
}
